C51 COMPILER V9.03   CYFITTER_CFG                                                          02/21/2015 15:43:20 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051_Keil_903\Debug\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\2.2\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_903\Debug\cyfitter_cfg.lst) CD DB 
                    -NOIP OT(0,SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051_Keil_903\Debug\cyfitter_cfg.obj)

line level    source

   1          /*******************************************************************************
   2          * FILENAME: cyfitter_cfg.c
   3          * PSoC Creator 2.2 Component Pack 6
   4          *
   5          * Description:
   6          * This file is automatically generated by PSoC Creator with device 
   7          * initialization code.  Except for the user defined sections in
   8          * CyClockStartupError(), this file should not be modified.
   9          *
  10          ********************************************************************************
  11          * Copyright 2013, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions, 
  13          * disclaimers, and limitations in the end user license agreement accompanying 
  14          * the software package with which this file was provided.
  15          ********************************************************************************/
  16          
  17          #include <string.h>
  18          #include <cytypes.h>
  19          #include <cydevice_trm.h>
  20          #include <cyfitter.h>
  21          #include <CyLib.h>
  22          #include <cyfitter_cfg.h>
  23          
  24          /* Clock startup error codes                                                   */
  25          #define CYCLOCKSTART_NO_ERROR    0u
  26          #define CYCLOCKSTART_XTAL_ERROR  1u
  27          #define CYCLOCKSTART_32KHZ_ERROR 2u
  28          #define CYCLOCKSTART_PLL_ERROR   3u
  29          
  30          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
              /*******************************************************************************
              * Function Name: CyClockStartupError
              ********************************************************************************
              * Summary:
              *  If an error is encountered during clock configuration (crystal startup error,
              *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
              *  the customer, this function will stop in an infinite loop.
              *
              * Parameters:
              *   void
              *
              * Return:
              *   void
              *
              *******************************************************************************/
              #if defined(__GNUC__) || defined(__ARMCC_VERSION)
              __attribute__ ((unused))
              #endif
              static void CyClockStartupError(uint8 errorCode);
              #if defined(__GNUC__) || defined(__ARMCC_VERSION)
              __attribute__ ((unused))
              #endif
              static void CyClockStartupError(uint8 errorCode)
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/21/2015 15:43:20 PAGE 2   

              {
                  /* To remove the compiler warning if errorCode not used.                */
                  errorCode = errorCode;
              
                  /* `#START CyClockStartupError` */
              
                  /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
                  /* we will end up here to allow the customer to implement something to  */
                  /* deal with the clock condition.                                       */
              
                  /* `#END` */
              
                  /* If nothing else, stop here since the clocks have not started         */
                  /* correctly.                                                           */
                  while(1) {}
              }
              #endif
  71          
  72          
  73          #if defined(__C51__) || defined(__CX51__)
  74                  #define CYPACKED
  75                  #define CYALIGNED
  76                  #define DMAINITSEC
  77                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  78          
  79          
  80          
  81                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  82                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  83                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  84          #else
                      #error Unsupported toolchain
              #endif
  87          
  88          /* IOPORT_0 Address: CYDEV_PRTDSI_PRT0_BASE Size (bytes): 7 */
  89          #define BS_IOPORT_0_VAL ((const uint8 CYFAR *)0x00080000u)
  90          
  91          /* IDMUX_IRQ Address: CYREG_IDMUX_IRQ_CTL0 Size (bytes): 8 */
  92          #define BS_IDMUX_IRQ_VAL ((const uint8 CYFAR *)0x00080008u)
  93          
  94          /* UDB_1_3_0_CONFIG Address: CYDEV_UCFG_B0_P2_U0_BASE Size (bytes): 128 */
  95          #define BS_UDB_1_3_0_CONFIG_VAL ((const uint8 CYFAR *)0x00080010u)
  96          
  97          /* UDB_1_3_1_CONFIG Address: CYDEV_UCFG_B0_P2_U1_BASE Size (bytes): 128 */
  98          #define BS_UDB_1_3_1_CONFIG_VAL ((const uint8 CYFAR *)0x00080090u)
  99          
 100          /* UWRK_B0_WRK_STATCTL_BITS Address: CYDEV_UWRK_UWRK8_B0_BASE + 0x00000070u Size (bytes): 32 */
 101          #define BS_UWRK_B0_WRK_STATCTL_BITS_VAL ((const uint8 CYFAR *)0x00080110u)
 102          
 103          /* UDB_2_0_HV_ROUTING Address: CYDEV_UCFG_B1_P2_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 104          #define BS_UDB_2_0_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080130u)
 105          
 106          /* UDB_2_1_HV_ROUTING Address: CYDEV_UCFG_B1_P3_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 107          #define BS_UDB_2_1_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000801B0u)
 108          
 109          /* UDB_2_2_HV_ROUTING Address: CYDEV_UCFG_B0_P3_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 110          #define BS_UDB_2_2_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080230u)
 111          
 112          /* UDBSWITCH_1_3 Address: CYDEV_UCFG_B0_P2_ROUTE_BASE Size (bytes): 128 */
 113          #define BS_UDBSWITCH_1_3_VAL ((const uint8 CYFAR *)0x000802B0u)
 114          
 115          /* UDB_2_3_HV_ROUTING Address: CYDEV_UCFG_B0_P2_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/21/2015 15:43:20 PAGE 3   

 116          #define BS_UDB_2_3_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080330u)
 117          
 118          /* DSI3_0_HV_ROUTING Address: CYDEV_UCFG_DSI9_BASE + 0x00000080u Size (bytes): 128 */
 119          #define BS_DSI3_0_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000803B0u)
 120          
 121          /* DSISWITCH_1_1 Address: CYDEV_UCFG_DSI8_BASE Size (bytes): 128 */
 122          #define BS_DSISWITCH_1_1_VAL ((const uint8 CYFAR *)0x00080430u)
 123          
 124          /* DSI3_1_HV_ROUTING Address: CYDEV_UCFG_DSI8_BASE + 0x00000080u Size (bytes): 128 */
 125          #define BS_DSI3_1_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000804B0u)
 126          
 127          /* DSI3_3_HV_ROUTING Address: CYDEV_UCFG_DSI2_BASE + 0x00000080u Size (bytes): 128 */
 128          #define BS_DSI3_3_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080530u)
 129          
 130          /* DSISWITCH_1_4 Address: CYDEV_UCFG_DSI1_BASE Size (bytes): 128 */
 131          #define BS_DSISWITCH_1_4_VAL ((const uint8 CYFAR *)0x000805B0u)
 132          
 133          /* DSI3_4_HV_ROUTING Address: CYDEV_UCFG_DSI1_BASE + 0x00000080u Size (bytes): 128 */
 134          #define BS_DSI3_4_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080630u)
 135          
 136          /* DSISWITCH_1_5 Address: CYDEV_UCFG_DSI0_BASE Size (bytes): 128 */
 137          #define BS_DSISWITCH_1_5_VAL ((const uint8 CYFAR *)0x000806B0u)
 138          
 139          /* DSI3_5_HV_ROUTING Address: CYDEV_UCFG_DSI0_BASE + 0x00000080u Size (bytes): 128 */
 140          #define BS_DSI3_5_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080730u)
 141          
 142          /* UCFG_BCTL0 Address: CYREG_BCTL0_MDCLK_EN Size (bytes): 16 */
 143          #define BS_UCFG_BCTL0_VAL ((const uint8 CYFAR *)0x000807B0u)
 144          
 145          /* IOPINS0_0 Address: CYREG_PRT0_DM0 Size (bytes): 8 */
 146          #define BS_IOPINS0_0_VAL ((const uint8 CYFAR *)0x000807C0u)
 147          
 148          /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
 149          #define BS_IOPINS0_2_VAL ((const uint8 CYFAR *)0x000807C8u)
 150          
 151          
 152          /*******************************************************************************
 153          * Function Name: cfg_dma_init
 154          ********************************************************************************
 155          * Summary:
 156          *  This function is used to copy device configuration data from constant values
 157          *  stored in memory into the proper chip configuration registers using DMA.  It
 158          *  pulls data out of the CFG_TD_LISTs to know exactly how/what to configure.
 159          *
 160          * Parameters:  
 161          *   void
 162          *
 163          * Return:
 164          *   void
 165          *
 166          *******************************************************************************/
 167          static void cfg_dma_init(void);
 168          static void cfg_dma_init(void)
 169          {
 170   1              /* TD structure for big-endian systems. Requires 2-byte endian swap */
 171   1              struct td_t {
 172   1                      uint16 size;
 173   1                      uint8 flags;
 174   1                      uint8 next_td_ptr;
 175   1                      uint16 src;
 176   1                      uint16 dest;
 177   1              } CYPACKED;
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/21/2015 15:43:20 PAGE 4   

 178   1      
 179   1              /* PHUB_CH1_CFGMEM_CFG0/1 initialization data */
 180   1              static const uint8 CYCODE CH1_ADDR_DATA0[] DMAINITSEC = { 0x01u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u
             -, 0x00u };
 181   1      
 182   1              /* PHUB_CH2_CFGMEM_CFG0/1 initialization data */
 183   1              static const uint8 CYCODE CH2_ADDR_DATA0[] DMAINITSEC = { 0x01u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x01u
             -, 0x00u };
 184   1      
 185   1              /* PHUB_CH5_CFGMEM_CFG0/1 initialization data */
 186   1              static const uint8 CYCODE CH5_ADDR_DATA0[] DMAINITSEC = { 0x01u, 0x00u, 0x00u, 0x00u, 0x08u, 0x00u, 0x00u
             -, 0x00u };
 187   1      
 188   1              /* PHUB_CH6_CFGMEM_CFG0/1 initialization data */
 189   1              static const uint8 CYCODE CH6_ADDR_DATA0[] DMAINITSEC = { 0x01u, 0x00u, 0x00u, 0x00u, 0x08u, 0x00u, 0x01u
             -, 0x00u };
 190   1      
 191   1              /* Initialization data for each DMA channel's TD registers */
 192   1              static const uint8 CYCODE DMA_TD_START_CMD[] DMAINITSEC = { 0x01u, 0x00u, 0x00u, 0x00u, 0x01u };
 193   1      
 194   1              static uint32 CYXDATA DMA_ZERO_VAL CYALIGNED;
 195   1      
 196   1              /* This table holds all of the initialization data necessary for the DMA
 197   1                 process to transfer data from the source location to the destination. */
 198   1              static const struct td_t CYCODE CFG_TD_LIST0[] DMAINITSEC = {
 199   1                      /* Size, Flags, Next, Source, Destination */
 200   1                      { 8u, 0x23u, 0x02u, (uint16)(uint32)(CH1_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM1_CFG0) },      /* TD 1 */
 201   1                      { 8u, 0x23u, 0x03u, (uint16)(uint32)(CH2_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM2_CFG0) },      /* TD 2 */
 202   1                      { 8u, 0x23u, 0x04u, (uint16)(uint32)(CH5_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM5_CFG0) },      /* TD 3 */
 203   1                      { 8u, 0x23u, 0x05u, (uint16)(uint32)(CH6_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM6_CFG0) },      /* TD 4 */
 204   1                      { 5u, 0x23u, 0x06u, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH1_BASIC_CFG) },   /* TD 5 */
 205   1                      { 5u, 0x23u, 0x07u, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH2_BASIC_CFG) },   /* TD 6 */
 206   1                      { 5u, 0x23u, 0x08u, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH5_BASIC_CFG) },   /* TD 7 */
 207   1                      { 5u, 0x23u, 0xFEu, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH6_BASIC_CFG) },   /* TD 8 */
 208   1                      { 16u, 0x22u, 0x0Au, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT1_DR) },        /* TD 9 */
 209   1                      { 64u, 0x22u, 0x0Bu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT3_DR) },        /* TD 10 */
 210   1                      { 16u, 0x22u, 0x0Cu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT12_DR) },       /* TD 11 */
 211   1                      { 16u, 0x22u, 0xFEu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT15_DR) },       /* TD 12 */
 212   1                      { 1024u, 0x22u, 0x0Eu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P0_U0_BASE) },   /* TD 13 *
             -/
 213   1                      { 384u, 0x22u, 0x0Fu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P3_U0_BASE) },    /* TD 14 */
 214   1                      { 2048u, 0x22u, 0x10u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P4_U0_BASE) },   /* TD 15 *
             -/
 215   1                      { 384u, 0x22u, 0x11u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P2_U0_BASE) },    /* TD 16 */
 216   1                      { 384u, 0x22u, 0x12u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P3_U0_BASE) },    /* TD 17 */
 217   1                      { 1024u, 0x22u, 0x13u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P4_U0_BASE) },   /* TD 18 *
             -/
 218   1                      { 128u, 0x22u, 0x14u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI2_BASE) },        /* TD 19 */
 219   1                      { 1280u, 0x22u, 0x15u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI3_BASE) },       /* TD 20 */
 220   1                      { 128u, 0x22u, 0x16u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI9_BASE) },        /* TD 21 */
 221   1                      { 512u, 0x22u, 0x17u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI12_BASE) },       /* TD 22 */
 222   1                      { 16u, 0x22u, 0xFEu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_BCTL1_MDCLK_EN) }, /* TD 23 */
 223   1                      { 7u, 0x23u, 0x19u, (uint16)(uint32)(BS_IOPORT_0_VAL), (uint16)(CYDEV_PRTDSI_PRT0_BASE) },      /* TD 24 */
 224   1                      { 32u, 0x23u, 0xFEu, (uint16)(uint32)(BS_UWRK_B0_WRK_STATCTL_BITS_VAL), (uint16)(CYDEV_UWRK_UWRK8_B0_BAS
             -E + 0x00000070u) },   /* TD 25 */
 225   1                      { 8u, 0x23u, 0x1Bu, (uint16)(uint32)(BS_IDMUX_IRQ_VAL), (uint16)(CYREG_IDMUX_IRQ_CTL0) },       /* TD 26 */
 226   1                      { 128u, 0x23u, 0x1Cu, (uint16)(uint32)(BS_UDB_1_3_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P2_U0_BASE) },  /
             -* TD 27 */
 227   1                      { 128u, 0x23u, 0x1Du, (uint16)(uint32)(BS_UDB_1_3_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P2_U1_BASE) },  /
             -* TD 28 */
 228   1                      { 128u, 0x23u, 0x1Eu, (uint16)(uint32)(BS_UDB_2_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P2_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 29 */
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/21/2015 15:43:20 PAGE 5   

 229   1                      { 128u, 0x23u, 0x1Fu, (uint16)(uint32)(BS_UDB_2_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P3_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 30 */
 230   1                      { 128u, 0x23u, 0x20u, (uint16)(uint32)(BS_UDB_2_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P3_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 31 */
 231   1                      { 128u, 0x23u, 0x21u, (uint16)(uint32)(BS_UDBSWITCH_1_3_VAL), (uint16)(CYDEV_UCFG_B0_P2_ROUTE_BASE) },  /
             -* TD 32 */
 232   1                      { 128u, 0x23u, 0x22u, (uint16)(uint32)(BS_UDB_2_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P2_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 33 */
 233   1                      { 128u, 0x23u, 0x23u, (uint16)(uint32)(BS_DSI3_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI9_BASE + 0x0000
             -0080u) },        /* TD 34 */
 234   1                      { 128u, 0x23u, 0x24u, (uint16)(uint32)(BS_DSISWITCH_1_1_VAL), (uint16)(CYDEV_UCFG_DSI8_BASE) }, /* TD 35
             - */
 235   1                      { 128u, 0x23u, 0x25u, (uint16)(uint32)(BS_DSI3_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI8_BASE + 0x0000
             -0080u) },        /* TD 36 */
 236   1                      { 128u, 0x23u, 0x26u, (uint16)(uint32)(BS_DSI3_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI2_BASE + 0x0000
             -0080u) },        /* TD 37 */
 237   1                      { 128u, 0x23u, 0x27u, (uint16)(uint32)(BS_DSISWITCH_1_4_VAL), (uint16)(CYDEV_UCFG_DSI1_BASE) }, /* TD 38
             - */
 238   1                      { 128u, 0x23u, 0x28u, (uint16)(uint32)(BS_DSI3_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI1_BASE + 0x0000
             -0080u) },        /* TD 39 */
 239   1                      { 128u, 0x23u, 0x29u, (uint16)(uint32)(BS_DSISWITCH_1_5_VAL), (uint16)(CYDEV_UCFG_DSI0_BASE) }, /* TD 40
             - */
 240   1                      { 128u, 0x23u, 0x2Au, (uint16)(uint32)(BS_DSI3_5_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI0_BASE + 0x0000
             -0080u) },        /* TD 41 */
 241   1                      { 16u, 0x23u, 0xFEu, (uint16)(uint32)(BS_UCFG_BCTL0_VAL), (uint16)(CYREG_BCTL0_MDCLK_EN) },     /* TD 42 */
 242   1              };
 243   1      
 244   1              DMA_ZERO_VAL = 0u;
 245   1              CY_SET_REG8((void CYXDATA *)CYREG_PHUB_CFGMEM0_CFG0, 0x10u);    /* set burstcnt */
 246   1              CY_SET_REG8((void CYXDATA *)CYREG_PHUB_CH0_BASIC_CFG, 0x01u);   /* enable ch0 */
 247   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH0_BASIC_STATUS+1u), 0x00u);   /* set first TD to 0 */
 248   1              CY_SET_REG16((void CYXDATA *)CYREG_PHUB_TDMEM0_ORIG_TD0, 42u*8u);       /* transfer size */
 249   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_TDMEM0_ORIG_TD0+2u), 0x01u);    /* set next TD to 1 */
 250   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_TDMEM0_ORIG_TD0+3u), 0xA3u);    /* set TD flags */
 251   1              CY_SET_REG16((void CYXDATA *)CYREG_PHUB_TDMEM0_ORIG_TD1, (uint16)(uint32)CFG_TD_LIST0); /* set td0's src 
             -addr */
 252   1              CY_SET_REG16((void CYXDATA *)(CYREG_PHUB_TDMEM0_ORIG_TD1+2u), CYDEV_PHUB_TDMEM1_BASE);  /* set td0's dst a
             -ddr */
 253   1              CY_SET_REG16((void CYXDATA *)CYREG_PHUB_CFGMEM0_CFG1, (uint16)(CYDEV_FLS_BASE >> 16));  /* set ch0's src h
             -igh addr */
 254   1              CY_SET_REG16((void CYXDATA *)(CYREG_PHUB_CFGMEM0_CFG1+2u), (uint16)(CYDEV_PHUB_TDMEM1_BASE >> 16));     /* se
             -t ch0's dst high addr */
 255   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH1_BASIC_STATUS+1u), 0x09u);   /* ch1 first TD: 9 */
 256   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH2_BASIC_STATUS+1u), 0x0Du);   /* ch2 first TD: 13 */
 257   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH5_BASIC_STATUS+1u), 0x18u);   /* ch5 first TD: 24 */
 258   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH6_BASIC_STATUS+1u), 0x1Au);   /* ch6 first TD: 26 */
 259   1      
 260   1              CY_CFG_MEMORY_BARRIER();
 261   1              CY_SET_REG8((void CYXDATA *)CYREG_PHUB_CH0_ACTION, 0x01u); /* cpu_req */
 262   1              CY_CFG_MEMORY_BARRIER();
 263   1      
 264   1              /* Wait for all DMA transfers to complete */
 265   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH0_BASIC_STATUS) & 0x01u)){}
 266   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH1_BASIC_STATUS) & 0x01u)){}
 267   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH2_BASIC_STATUS) & 0x01u)){}
 268   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH5_BASIC_STATUS) & 0x01u)){}
 269   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH6_BASIC_STATUS) & 0x01u)){}
 270   1      
 271   1      
 272   1      }
 273          /*******************************************************************************
 274          * Function Name: ClockSetup
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/21/2015 15:43:20 PAGE 6   

 275          ********************************************************************************
 276          *
 277          * Summary:
 278          *  Performs the initialization of all of the clocks in the device based on the
 279          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 280          *  clocks and setting the necessary dividers to produce the desired frequency. 
 281          *
 282          * Parameters:
 283          *  void
 284          *
 285          * Return:
 286          *  void
 287          *
 288          *******************************************************************************/
 289          static void ClockSetup(void);
 290          static void ClockSetup(void)
 291          {
 292   1              uint32 timeout;
 293   1              uint8 pllLock;
 294   1      
 295   1      
 296   1              /* Configure Digital Clocks based on settings from Clock DWR */
 297   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG0_CFG0), 0x3A97u);
 298   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG0_CFG0 + 0x2u), 0x19u);
 299   1      
 300   1              /* Configure ILO based on settings from Clock DWR */
 301   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x02u);
 302   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x08u);
 303   1      
 304   1              /* Configure IMO based on settings from Clock DWR */
 305   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x03u);
 306   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8((void CYFAR *)CYREG_FLSHID_CUST_TABLES_IMO
             -_3MHZ)));
 307   1      
 308   1              /* Configure PLL based on settings from Clock DWR */
 309   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0008u);
 310   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1051u);
 311   1              /* Wait up to 250us for the PLL to lock */
 312   1              pllLock = 0u;
 313   1              for (timeout = 250u / 10u; (timeout > 0u) && (pllLock != 0x03u); timeout--) { 
 314   2                      pllLock = 0x03u & ((uint8)((uint8)pllLock << 1) | ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_PLL_SR) & 
             -0x01u) >> 0));
 315   2                      CyDelayCycles(10u * 48u); /* Delay 10us based on 48MHz clock */
 316   2              }
 317   1      
 318   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 319   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100u);
 320   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
 321   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 322   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 323   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
 324   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 325   1      
 326   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG2), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG2) | 0x01u
             -)));
 327   1      }
 328          
 329          
 330          /* Analog API Functions */
 331          
 332          
 333          /*******************************************************************************
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/21/2015 15:43:20 PAGE 7   

 334          * Function Name: AnalogSetDefault
 335          ********************************************************************************
 336          *
 337          * Summary:
 338          *  Sets up the analog portions of the chip to default values based on chip
 339          *  configuration options from the project.
 340          *
 341          * Parameters:
 342          *  void
 343          *
 344          * Return:
 345          *  void
 346          *
 347          *******************************************************************************/
 348          static void AnalogSetDefault(void);
 349          static void AnalogSetDefault(void)
 350          {
 351   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 352   1              CY_SET_REG8((void CYXDATA *)CYREG_BG_DFT0, bg_xover_inl_trim & 0x07u);
 353   1              CY_SET_REG8((void CYXDATA *)CYREG_BG_DFT1, ((uint8)((uint8)bg_xover_inl_trim >> 4)) & 0x0Fu);
 354   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x44u);
 355   1      }
 356          
 357          
 358          /*******************************************************************************
 359          * Function Name: SetAnalogRoutingPumps
 360          ********************************************************************************
 361          *
 362          * Summary:
 363          * Enables or disables the analog pumps feeding analog routing switches.
 364          * Intended to be called at startup, based on the Vdda system configuration;
 365          * may be called during operation when the user informs us that the Vdda voltage
 366          * crossed the pump threshold.
 367          *
 368          * Parameters:
 369          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 370          *
 371          * Return:
 372          *  void
 373          *
 374          *******************************************************************************/
 375          void SetAnalogRoutingPumps(uint8 enabled)
 376          {
 377   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 378   1              if (enabled != 0u)
 379   1              {
 380   2                      regValue |= 0x00u;
 381   2              }
 382   1              else
 383   1              {
 384   2                      regValue &= (uint8)~0x00u;
 385   2              }
 386   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 387   1      }
 388          
 389          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 390          
 391          
 392          /*******************************************************************************
 393          * Function Name: cyfitter_cfg
 394          ********************************************************************************
 395          * Summary:
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/21/2015 15:43:20 PAGE 8   

 396          *  This function is called by the start-up code for the selected device. It
 397          *  performs all of the necessary device configuration based on the design
 398          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 399          *  as Clocks and Pins as well as any component configuration that is necessary.
 400          *
 401          * Parameters:  
 402          *   void
 403          *
 404          * Return:
 405          *   void
 406          *
 407          *******************************************************************************/
 408          
 409          void cyfitter_cfg(void)
 410          {
 411   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 412   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
             -0x05u));
 413   1      
 414   1              {
 415   2                      cfg_dma_init();
 416   2      
 417   2                      /* Enable digital routing */
 418   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 419   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
             -) | 0x02u);
 420   2      
 421   2                      /* Enable UDB array */
 422   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x40u);
 423   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2, CY_GET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2) | 0x10u)
             -;
 424   2              }
 425   1      
 426   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 427   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT0_DM0), (const void CYFAR *)(BS_IOPINS0_0_VAL), 8u);
 428   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT2_DM0), (const void CYFAR *)(BS_IOPINS0_2_VAL), 8u);
 429   1              CY_SET_REG8((void CYXDATA *)(CYREG_INTC_CSR_EN), 0x01u);
 430   1      
 431   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 432   1              CY_SET_REG8((void CYXDATA *)CYDEV_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYDEV_BOOST_CR2) | 0x08u));
 433   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
 434   1              {
 435   2                      CY_SET_REG8((void CYXDATA *)CYDEV_MFGCFG_PWRSYS_WAKE_TR2, 0x3Au);
 436   2              }
 437   1      
 438   1      
 439   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 440   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xF1u : 0xC0u));
 441   1              /* Setup clocks based on selections from Clock DWR */
 442   1              ClockSetup();
 443   1              /* Set Flash Cycles based on newly configured 24.00MHz Bus Clock. */
 444   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xB1u : 0x80u));
 445   1      
 446   1              /* Perform basic analog initialization to defaults */
 447   1              AnalogSetDefault();
 448   1      
 449   1              /* Configure alternate active mode */
 450   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 451   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
             -~0x02u);        /* Disable CPU */
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/21/2015 15:43:20 PAGE 9   

 452   1      }
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/21/2015 15:43:20 PAGE 10  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION cfg_dma_init (BEGIN)
                                           ; SOURCE LINE # 168
                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 244
0000 7F00              MOV     R7,#00H
0002 7E00              MOV     R6,#00H
0004 7D00              MOV     R5,#00H
0006 7C00              MOV     R4,#00H
0008 900000      R     MOV     DPTR,#DMA_ZERO_VAL
000B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 245
000E 907600            MOV     DPTR,#07600H
0011 7410              MOV     A,#010H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 246
0014 907010            MOV     DPTR,#07010H
0017 7401              MOV     A,#01H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 247
001A 907019            MOV     DPTR,#07019H
001D E4                CLR     A
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 248
001F 7B02              MOV     R3,#02H
0021 7A78              MOV     R2,#078H
0023 7900              MOV     R1,#00H
0025 7D50              MOV     R5,#050H
0027 7C01              MOV     R4,#01H
0029 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 249
002C 907802            MOV     DPTR,#07802H
002F 7401              MOV     A,#01H
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 250
0032 907803            MOV     DPTR,#07803H
0035 74A3              MOV     A,#0A3H
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 251
0038 7B02              MOV     R3,#02H
003A 7A78              MOV     R2,#078H
003C 7904              MOV     R1,#04H
003E C003              PUSH    AR3
0040 C002              PUSH    AR2
0042 C001              PUSH    AR1
0044 7BFF              MOV     R3,#0FFH
0046 7A00        R     MOV     R2,#HIGH CFG_TD_LIST0
0048 7900        R     MOV     R1,#LOW CFG_TD_LIST0
004A AC02              MOV     R4,AR2
004C AD01              MOV     R5,AR1
004E D001              POP     AR1
0050 D002              POP     AR2
0052 D003              POP     AR3
0054 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 252
0057 7B02              MOV     R3,#02H
0059 7A78              MOV     R2,#078H
005B 7906              MOV     R1,#06H
005D 7D08              MOV     R5,#08H
005F 7C78              MOV     R4,#078H
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/21/2015 15:43:20 PAGE 11  

0061 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 253
0064 7B02              MOV     R3,#02H
0066 7A76              MOV     R2,#076H
0068 7904              MOV     R1,#04H
006A 7D10              MOV     R5,#010H
006C 7C00              MOV     R4,#00H
006E 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 254
0071 7B02              MOV     R3,#02H
0073 7A76              MOV     R2,#076H
0075 7906              MOV     R1,#06H
0077 7D00              MOV     R5,#00H
0079 7C00              MOV     R4,#00H
007B 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 255
007E 907029            MOV     DPTR,#07029H
0081 7409              MOV     A,#09H
0083 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 256
0084 907039            MOV     DPTR,#07039H
0087 740D              MOV     A,#0DH
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 257
008A 907069            MOV     DPTR,#07069H
008D 7418              MOV     A,#018H
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 258
0090 907079            MOV     DPTR,#07079H
0093 741A              MOV     A,#01AH
0095 F0                MOVX    @DPTR,A
0096         ?C0003:
                                           ; SOURCE LINE # 260
0096         ?C0001:
0096         ?C0002:
                                           ; SOURCE LINE # 261
0096 907014            MOV     DPTR,#07014H
0099 7401              MOV     A,#01H
009B F0                MOVX    @DPTR,A
009C         ?C0006:
                                           ; SOURCE LINE # 262
009C         ?C0004:
009C         ?C0005:
009C         ?C0007:
                                           ; SOURCE LINE # 265
009C 907018            MOV     DPTR,#07018H
009F E0                MOVX    A,@DPTR
00A0 FF                MOV     R7,A
00A1 EF                MOV     A,R7
00A2 5401              ANL     A,#01H
00A4 FF                MOV     R7,A
00A5 7E00              MOV     R6,#00H
00A7 EF                MOV     A,R7
00A8 4E                ORL     A,R6
00A9 70F1              JNZ     ?C0007
00AB         ?C0008:
00AB         ?C0009:
                                           ; SOURCE LINE # 266
00AB 907028            MOV     DPTR,#07028H
00AE E0                MOVX    A,@DPTR
00AF FF                MOV     R7,A
00B0 EF                MOV     A,R7
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/21/2015 15:43:20 PAGE 12  

00B1 5401              ANL     A,#01H
00B3 FF                MOV     R7,A
00B4 7E00              MOV     R6,#00H
00B6 EF                MOV     A,R7
00B7 4E                ORL     A,R6
00B8 70F1              JNZ     ?C0009
00BA         ?C0010:
00BA         ?C0011:
                                           ; SOURCE LINE # 267
00BA 907038            MOV     DPTR,#07038H
00BD E0                MOVX    A,@DPTR
00BE FF                MOV     R7,A
00BF EF                MOV     A,R7
00C0 5401              ANL     A,#01H
00C2 FF                MOV     R7,A
00C3 7E00              MOV     R6,#00H
00C5 EF                MOV     A,R7
00C6 4E                ORL     A,R6
00C7 70F1              JNZ     ?C0011
00C9         ?C0012:
00C9         ?C0013:
                                           ; SOURCE LINE # 268
00C9 907068            MOV     DPTR,#07068H
00CC E0                MOVX    A,@DPTR
00CD FF                MOV     R7,A
00CE EF                MOV     A,R7
00CF 5401              ANL     A,#01H
00D1 FF                MOV     R7,A
00D2 7E00              MOV     R6,#00H
00D4 EF                MOV     A,R7
00D5 4E                ORL     A,R6
00D6 70F1              JNZ     ?C0013
00D8         ?C0014:
00D8         ?C0015:
                                           ; SOURCE LINE # 269
00D8 907078            MOV     DPTR,#07078H
00DB E0                MOVX    A,@DPTR
00DC FF                MOV     R7,A
00DD EF                MOV     A,R7
00DE 5401              ANL     A,#01H
00E0 FF                MOV     R7,A
00E1 7E00              MOV     R6,#00H
00E3 EF                MOV     A,R7
00E4 4E                ORL     A,R6
00E5 70F1              JNZ     ?C0015
00E7         ?C0016:
                                           ; SOURCE LINE # 272
00E7         ?C0017:
00E7 22                RET     
             ; FUNCTION cfg_dma_init (END)

             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 290
                                           ; SOURCE LINE # 291
                                           ; SOURCE LINE # 297
0000 7B00              MOV     R3,#00H
0002 7A40              MOV     R2,#040H
0004 7980              MOV     R1,#080H
0006 7D97              MOV     R5,#097H
0008 7C3A              MOV     R4,#03AH
000A 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 298
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/21/2015 15:43:20 PAGE 13  

000D 904082            MOV     DPTR,#04082H
0010 7419              MOV     A,#019H
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 301
0013 904300            MOV     DPTR,#04300H
0016 7402              MOV     A,#02H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 302
0019 904000            MOV     DPTR,#04000H
001C 7408              MOV     A,#08H
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 305
001F 904200            MOV     DPTR,#04200H
0022 7403              MOV     A,#03H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 306
0025 7B0C              MOV     R3,#0CH
0027 7A01              MOV     R2,#01H
0029 7908              MOV     R1,#08H
002B 120000      E     LCALL   _cyread8
002E 9046A1            MOV     DPTR,#046A1H
0031 EF                MOV     A,R7
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 309
0033 7B00              MOV     R3,#00H
0035 7A42              MOV     R2,#042H
0037 7922              MOV     R1,#022H
0039 7D08              MOV     R5,#08H
003B 7C00              MOV     R4,#00H
003D 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 310
0040 7B00              MOV     R3,#00H
0042 7A42              MOV     R2,#042H
0044 7920              MOV     R1,#020H
0046 7D51              MOV     R5,#051H
0048 7C10              MOV     R4,#010H
004A 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 312
004D 900000      R     MOV     DPTR,#pllLock
0050 E4                CLR     A
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 313
0052 7F19              MOV     R7,#019H
0054 7E00              MOV     R6,#00H
0056 7D00              MOV     R5,#00H
0058 7C00              MOV     R4,#00H
005A 900000      R     MOV     DPTR,#timeout
005D 120000      E     LCALL   ?C?LSTXDATA
0060         ?C0018:
0060 900000      R     MOV     DPTR,#timeout
0063 120000      E     LCALL   ?C?LLDXDATA
0066 D3                SETB    C
0067 EF                MOV     A,R7
0068 9400              SUBB    A,#00H
006A EE                MOV     A,R6
006B 9400              SUBB    A,#00H
006D 404E              JC      ?C0019
006F 900000      R     MOV     DPTR,#pllLock
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 EF                MOV     A,R7
0075 6403              XRL     A,#03H
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/21/2015 15:43:20 PAGE 14  

0077 6044              JZ      ?C0019
                                           ; SOURCE LINE # 314
0079 904225            MOV     DPTR,#04225H
007C E0                MOVX    A,@DPTR
007D FF                MOV     R7,A
007E EF                MOV     A,R7
007F 5401              ANL     A,#01H
0081 FF                MOV     R7,A
0082 7E00              MOV     R6,#00H
0084 900000      R     MOV     DPTR,#pllLock
0087 E0                MOVX    A,@DPTR
0088 FE                MOV     R6,A
0089 EE                MOV     A,R6
008A 25E0              ADD     A,ACC
008C FE                MOV     R6,A
008D EE                MOV     A,R6
008E 4F                ORL     A,R7
008F FF                MOV     R7,A
0090 EF                MOV     A,R7
0091 5403              ANL     A,#03H
0093 FF                MOV     R7,A
0094 900000      R     MOV     DPTR,#pllLock
0097 EF                MOV     A,R7
0098 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 315
0099 7FE0              MOV     R7,#0E0H
009B 7E01              MOV     R6,#01H
009D 7D00              MOV     R5,#00H
009F 7C00              MOV     R4,#00H
00A1 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 316
00A4         ?C0020:
00A4 900000      R     MOV     DPTR,#timeout
00A7 120000      E     LCALL   ?C?LLDXDATA
00AA 7BFF              MOV     R3,#0FFH
00AC 7AFF              MOV     R2,#0FFH
00AE 79FF              MOV     R1,#0FFH
00B0 78FF              MOV     R0,#0FFH
00B2 120000      E     LCALL   ?C?LADD
00B5 900000      R     MOV     DPTR,#timeout
00B8 120000      E     LCALL   ?C?LSTXDATA
00BB 80A3              SJMP    ?C0018
00BD         ?C0019:
                                           ; SOURCE LINE # 319
00BD 7B00              MOV     R3,#00H
00BF 7A40              MOV     R2,#040H
00C1 7904              MOV     R1,#04H
00C3 7D00              MOV     R5,#00H
00C5 7C01              MOV     R4,#01H
00C7 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 320
00CA 904004            MOV     DPTR,#04004H
00CD 7407              MOV     A,#07H
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 321
00D0 904006            MOV     DPTR,#04006H
00D3 E4                CLR     A
00D4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 322
00D5 904008            MOV     DPTR,#04008H
00D8 7448              MOV     A,#048H
00DA F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/21/2015 15:43:20 PAGE 15  

                                           ; SOURCE LINE # 323
00DB 904004            MOV     DPTR,#04004H
00DE E4                CLR     A
00DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 324
00E0 904001            MOV     DPTR,#04001H
00E3 7402              MOV     A,#02H
00E5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 326
00E6 9043A2            MOV     DPTR,#043A2H
00E9 E0                MOVX    A,@DPTR
00EA FF                MOV     R7,A
00EB EF                MOV     A,R7
00EC 4401              ORL     A,#01H
00EE FF                MOV     R7,A
00EF 9043A2            MOV     DPTR,#043A2H
00F2 EF                MOV     A,R7
00F3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 327
00F4         ?C0021:
00F4 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 349
                                           ; SOURCE LINE # 350
                                           ; SOURCE LINE # 351
0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
0006 120000      E     LCALL   _cyread8
0009 900000      R     MOV     DPTR,#bg_xover_inl_trim
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 352
000E 900000      R     MOV     DPTR,#bg_xover_inl_trim
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 5407              ANL     A,#07H
0016 FF                MOV     R7,A
0017 90586E            MOV     DPTR,#0586EH
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 353
001C 900000      R     MOV     DPTR,#bg_xover_inl_trim
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 C4                SWAP    A
0023 540F              ANL     A,#0FH
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 540F              ANL     A,#0FH
0029 FF                MOV     R7,A
002A 90586F            MOV     DPTR,#0586FH
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 354
002F 905876            MOV     DPTR,#05876H
0032 7444              MOV     A,#044H
0034 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/21/2015 15:43:20 PAGE 16  

                                           ; SOURCE LINE # 355
0035         ?C0022:
0035 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _SetAnalogRoutingPumps (BEGIN)
                                           ; SOURCE LINE # 375
0000 900000      R     MOV     DPTR,#enabled
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 376
                                           ; SOURCE LINE # 377
0005 905876            MOV     DPTR,#05876H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#regValue
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 378
000F 900000      R     MOV     DPTR,#enabled
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 6010              JZ      ?C0023
                                           ; SOURCE LINE # 379
                                           ; SOURCE LINE # 380
0017 900000      R     MOV     DPTR,#regValue
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 4400              ORL     A,#00H
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#regValue
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 381
0025 800E              SJMP    ?C0024
0027         ?C0023:
                                           ; SOURCE LINE # 383
                                           ; SOURCE LINE # 384
0027 900000      R     MOV     DPTR,#regValue
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 54FF              ANL     A,#0FFH
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#regValue
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 385
0035         ?C0024:
                                           ; SOURCE LINE # 386
0035 900000      R     MOV     DPTR,#regValue
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 905876            MOV     DPTR,#05876H
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 387
003F         ?C0025:
003F 22                RET     
             ; FUNCTION _SetAnalogRoutingPumps (END)
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/21/2015 15:43:20 PAGE 17  


             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 409
                                           ; SOURCE LINE # 410
                                           ; SOURCE LINE # 412
0000 7B00              MOV     R3,#00H
0002 7A46              MOV     R2,#046H
0004 79E8              MOV     R1,#0E8H
0006 120000      E     LCALL   _cyread8
0009 EF                MOV     A,R7
000A 4405              ORL     A,#05H
000C FD                MOV     R5,A
000D 7B00              MOV     R3,#00H
000F 7A46              MOV     R2,#046H
0011 79E8              MOV     R1,#0E8H
0013 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 414
                                           ; SOURCE LINE # 415
0016 120000      R     LCALL   cfg_dma_init
                                           ; SOURCE LINE # 418
0019 7B01              MOV     R3,#01H
001B 7A50              MOV     R2,#050H
001D 7903              MOV     R1,#03H
001F 120000      E     LCALL   _cyread8
0022 EF                MOV     A,R7
0023 4402              ORL     A,#02H
0025 FD                MOV     R5,A
0026 7B01              MOV     R3,#01H
0028 7A50              MOV     R2,#050H
002A 7903              MOV     R1,#03H
002C 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 419
002F 7B01              MOV     R3,#01H
0031 7A50              MOV     R2,#050H
0033 7913              MOV     R1,#013H
0035 120000      E     LCALL   _cyread8
0038 EF                MOV     A,R7
0039 4402              ORL     A,#02H
003B FD                MOV     R5,A
003C 7B01              MOV     R3,#01H
003E 7A50              MOV     R2,#050H
0040 7913              MOV     R1,#013H
0042 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 422
0045 9043A0            MOV     DPTR,#043A0H
0048 E0                MOVX    A,@DPTR
0049 FF                MOV     R7,A
004A EF                MOV     A,R7
004B 4440              ORL     A,#040H
004D FF                MOV     R7,A
004E 9043A0            MOV     DPTR,#043A0H
0051 EF                MOV     A,R7
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 423
0053 9043C2            MOV     DPTR,#043C2H
0056 E0                MOVX    A,@DPTR
0057 FF                MOV     R7,A
0058 EF                MOV     A,R7
0059 4410              ORL     A,#010H
005B FF                MOV     R7,A
005C 9043C2            MOV     DPTR,#043C2H
005F EF                MOV     A,R7
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/21/2015 15:43:20 PAGE 18  

0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 424
                                           ; SOURCE LINE # 427
0061 7B08              MOV     R3,#08H
0063 7A07              MOV     R2,#07H
0065 79C0              MOV     R1,#0C0H
0067 C003              PUSH    AR3
0069 C002              PUSH    AR2
006B C001              PUSH    AR1
006D 7B00              MOV     R3,#00H
006F 7A51              MOV     R2,#051H
0071 7902              MOV     R1,#02H
0073 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0076 120000      E     LCALL   ?C?PSTXDATA
0079 D001              POP     AR1
007B D002              POP     AR2
007D D003              POP     AR3
007F 7F08              MOV     R7,#08H
0081 7E00              MOV     R6,#00H
0083 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 428
0086 7B08              MOV     R3,#08H
0088 7A07              MOV     R2,#07H
008A 79C8              MOV     R1,#0C8H
008C C003              PUSH    AR3
008E C002              PUSH    AR2
0090 C001              PUSH    AR1
0092 7B00              MOV     R3,#00H
0094 7A51              MOV     R2,#051H
0096 7922              MOV     R1,#022H
0098 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
009B 120000      E     LCALL   ?C?PSTXDATA
009E D001              POP     AR1
00A0 D002              POP     AR2
00A2 D003              POP     AR3
00A4 7F08              MOV     R7,#08H
00A6 7E00              MOV     R6,#00H
00A8 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 429
00AB 9044F4            MOV     DPTR,#044F4H
00AE 7401              MOV     A,#01H
00B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 432
00B1 904322            MOV     DPTR,#04322H
00B4 E0                MOVX    A,@DPTR
00B5 FF                MOV     R7,A
00B6 EF                MOV     A,R7
00B7 4408              ORL     A,#08H
00B9 FF                MOV     R7,A
00BA 904322            MOV     DPTR,#04322H
00BD EF                MOV     A,R7
00BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 433
00BF 9046EC            MOV     DPTR,#046ECH
00C2 E0                MOVX    A,@DPTR
00C3 FF                MOV     R7,A
00C4 EF                MOV     A,R7
00C5 C3                CLR     C
00C6 9405              SUBB    A,#05H
00C8 5006              JNC     ?C0026
                                           ; SOURCE LINE # 434
                                           ; SOURCE LINE # 435
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/21/2015 15:43:20 PAGE 19  

00CA 904689            MOV     DPTR,#04689H
00CD 743A              MOV     A,#03AH
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 436
00D0         ?C0026:
                                           ; SOURCE LINE # 440
00D0 904800            MOV     DPTR,#04800H
00D3 74C0              MOV     A,#0C0H
00D5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 442
00D6 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 444
00D9 904800            MOV     DPTR,#04800H
00DC 7480              MOV     A,#080H
00DE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 447
00DF 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 450
00E2 7B00              MOV     R3,#00H
00E4 7A43              MOV     R2,#043H
00E6 79A0              MOV     R1,#0A0H
00E8 C003              PUSH    AR3
00EA C002              PUSH    AR2
00EC C001              PUSH    AR1
00EE 7B00              MOV     R3,#00H
00F0 7A43              MOV     R2,#043H
00F2 79B0              MOV     R1,#0B0H
00F4 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00F7 120000      E     LCALL   ?C?PSTXDATA
00FA D001              POP     AR1
00FC D002              POP     AR2
00FE D003              POP     AR3
0100 7F0E              MOV     R7,#0EH
0102 7E00              MOV     R6,#00H
0104 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 451
0107 9043B0            MOV     DPTR,#043B0H
010A E0                MOVX    A,@DPTR
010B FF                MOV     R7,A
010C EF                MOV     A,R7
010D 54FD              ANL     A,#0FDH
010F FF                MOV     R7,A
0110 EF                MOV     A,R7
0111 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 452
0112         ?C0027:
0112 22                RET     
             ; FUNCTION cyfitter_cfg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    870    ----
   CONSTANT SIZE    =    373    ----
   XDATA SIZE       =     12    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/21/2015 15:43:20 PAGE 20  

   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
